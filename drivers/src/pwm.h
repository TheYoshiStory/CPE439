#ifndef PWM_H
#define PWM_H

#include "xparameters.h"
#include "xil_io.h"

#define CLK_PERIOD_NS	10
#define PWM_PERIOD_NS	20000000

typedef enum
{
	PWM0 	= XPAR_AXI_TIMER_0_BASEADDR,
	PWM1	= XPAR_AXI_TIMER_1_BASEADDR,
	PWM2 	= XPAR_AXI_TIMER_2_BASEADDR,
	PWM3	= XPAR_AXI_TIMER_3_BASEADDR,
} pwm_addr_t;

typedef enum
{
	PWM_DUTY_CYCLE_0	= (PWM_PERIOD_NS * 0) / 100,
	PWM_DUTY_CYCLE_5	= (PWM_PERIOD_NS * 5) / 100,
	PWM_DUTY_CYCLE_10	= (PWM_PERIOD_NS * 10) / 100,
	PWM_DUTY_CYCLE_15	= (PWM_PERIOD_NS * 15) / 100,
	PWM_DUTY_CYCLE_20	= (PWM_PERIOD_NS * 20) / 100,
	PWM_DUTY_CYCLE_25	= (PWM_PERIOD_NS * 25) / 100,
	PWM_DUTY_CYCLE_30	= (PWM_PERIOD_NS * 30) / 100,
	PWM_DUTY_CYCLE_35	= (PWM_PERIOD_NS * 35) / 100,
	PWM_DUTY_CYCLE_40	= (PWM_PERIOD_NS * 40) / 100,
	PWM_DUTY_CYCLE_45	= (PWM_PERIOD_NS * 45) / 100,
	PWM_DUTY_CYCLE_50	= (PWM_PERIOD_NS * 50) / 100,
	PWM_DUTY_CYCLE_55	= (PWM_PERIOD_NS * 55) / 100,
	PWM_DUTY_CYCLE_60	= (PWM_PERIOD_NS * 60) / 100,
	PWM_DUTY_CYCLE_65	= (PWM_PERIOD_NS * 65) / 100,
	PWM_DUTY_CYCLE_70	= (PWM_PERIOD_NS * 70) / 100,
	PWM_DUTY_CYCLE_75	= (PWM_PERIOD_NS * 75) / 100,
	PWM_DUTY_CYCLE_80	= (PWM_PERIOD_NS * 80) / 100,
	PWM_DUTY_CYCLE_85	= (PWM_PERIOD_NS * 85) / 100,
	PWM_DUTY_CYCLE_90	= (PWM_PERIOD_NS * 90) / 100,
	PWM_DUTY_CYCLE_95	= (PWM_PERIOD_NS * 95) / 100,
	PWM_DUTY_CYCLE_100	= (PWM_PERIOD_NS * 100) / 100,
} pwm_duty_cycle_t;

void pwm_init();

void pwm_set(pwm_addr_t pwm, pwm_duty_cycle_t duty_cycle);

#endif
